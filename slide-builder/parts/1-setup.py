#!/usr/bin/env python3
"""
Setup script for ZUME Slide Full Builder
Creates folder structure and manages environment variables
"""

import os
import sys
import argparse
import json
from pathlib import Path
from typing import Optional

def load_env_file() -> dict:
    """Load existing .env file if it exists"""
    env_vars = {}
    env_file = Path('../.env')
    
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip().strip('"\'')
    
    return env_vars

def save_env_file(env_vars: dict) -> None:
    """Save environment variables to .env file"""
    with open('../.env', 'w') as f:
        f.write("# ZUME Slide Full Builder Environment Variables\n")
        f.write("# Generated by setup script\n\n")
        
        for key, value in env_vars.items():
            f.write(f'{key}="{value}"\n')
    
    print("‚úÖ .env file created/updated successfully")

def get_env_variable(var_name: str, description: str, current_value: Optional[str] = None) -> str:
    """Get environment variable from user input"""
    if current_value:
        print(f"Current {var_name}: {current_value}")
        use_current = input(f"Use current value for {var_name}? (y/n): ").lower().strip()
        if use_current in ['y', 'yes', '']:
            return current_value
    
    while True:
        value = input(f"Enter {description} ({var_name}): ").strip()
        if value:
            return value
        print("‚ùå This value is required. Please try again.")

def setup_vimeo_credentials() -> dict:
    """Setup Vimeo API credentials"""
    print("\nüîë Setting up Vimeo API credentials...")
    print("You can get these from: https://developer.vimeo.com/apps")
    
    # Load existing environment variables
    env_vars = load_env_file()
    
    # Get each required credential
    env_vars['VIMEO_CLIENT_ID'] = get_env_variable(
        'VIMEO_CLIENT_ID',
        'Vimeo Client ID',
        env_vars.get('VIMEO_CLIENT_ID')
    )
    
    env_vars['VIMEO_CLIENT_SECRET'] = get_env_variable(
        'VIMEO_CLIENT_SECRET',
        'Vimeo Client Secret',
        env_vars.get('VIMEO_CLIENT_SECRET')
    )
    
    env_vars['VIMEO_ACCESS_TOKEN'] = get_env_variable(
        'VIMEO_ACCESS_TOKEN',
        'Vimeo Access Token',
        env_vars.get('VIMEO_ACCESS_TOKEN')
    )
    
    return env_vars

def get_language_code(provided_lang: str = None) -> str:
    """Get language code from user or validate provided language"""
    if provided_lang:
        # Validate provided language code
        lang_code = provided_lang.strip().lower()
        if len(lang_code) >= 2:
            print(f"\nüåê Language Configuration: {lang_code}")
            return lang_code
        else:
            print(f"‚ùå Invalid language code '{provided_lang}'. Must be at least 2 characters.")
            print("Switching to interactive mode...")
    
    print("\nüåê Language Configuration")
    print("Enter the language code for this project (e.g., 'en', 'es', 'fr', 'de', etc.)")
    
    while True:
        lang_code = input("Language code: ").strip().lower()
        if lang_code and len(lang_code) >= 2:
            return lang_code
        print("‚ùå Please enter a valid language code (2+ characters)")

def create_folder_structure(language_code: str, base_location: str = ".") -> Path:
    """Create the required folder structure"""
    print(f"\nüìÅ Creating folder structure for language: {language_code}")
    print(f"üìç Base location: {os.path.abspath(base_location)}")
    
    # Create base location if it doesn't exist
    base_path = Path(base_location)
    base_path.mkdir(parents=True, exist_ok=True)
    
    # Create main language folder
    lang_folder = base_path / language_code
    lang_folder.mkdir(exist_ok=True)
    print(f"‚úÖ Created folder: {lang_folder}")
    
    # Create subfolders
    subfolders = ['10', '20', 'intensive', 'videos']
    
    for subfolder in subfolders:
        folder_path = lang_folder / subfolder
        folder_path.mkdir(exist_ok=True)
        print(f"‚úÖ Created subfolder: {folder_path}")
    
    print(f"\nüìÇ Folder structure created successfully!")
    print(f"   {os.path.abspath(lang_folder)}/")
    for subfolder in subfolders:
        print(f"   ‚îú‚îÄ‚îÄ {subfolder}/")
    
    return lang_folder

def save_config(language_code: str, folder_location: str) -> None:
    """Save configuration to file"""
    config = {
        'language_code': language_code,
        'folder_location': os.path.abspath(folder_location),
        'created_at': str(os.path.getctime('.')),
        'project_path': os.path.abspath(folder_location + '/' + language_code)
    }
    
    # Save to JSON config file
    with open('../.config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print(f"‚úÖ Configuration saved to .config.json")

def load_config() -> dict:
    """Load configuration from file"""
    config_file = Path('../.config.json')
    if config_file.exists():
        with open(config_file, 'r') as f:
            return json.load(f)
    return {}

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(
        description='Setup script for ZUME Slide Full Builder',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python 1-setup.py                                    # Interactive setup in current directory
  python 1-setup.py --language en --folder ./projects    # Non-interactive setup
  python 1-setup.py -l es -f /path/to/projects           # Short options
  python 1-setup.py -l en -i                            # Force interactive mode for credentials
  python 1-setup.py --show-config                        # Show current configuration
  python 1-setup.py --skip vimeo --language en           # Skip Vimeo credential setup
  python 1-setup.py --skip vimeo,folders -l en           # Skip multiple steps
  python 1-setup.py -l en -k vimeo,config               # Skip Vimeo and config steps
        """
    )
    
    parser.add_argument(
        '--folder', '-f',
        default='.',
        help='Base location where language folders will be created (default: current directory)'
    )
    
    parser.add_argument(
        '--language', '-l',
        help='Language code (e.g., en, es, fr, de). If not provided, will prompt interactively. '
             'Must be at least 2 characters long.'
    )
    
    parser.add_argument(
        '--show-config', '-s',
        action='store_true',
        help='Show current configuration and exit'
    )
    
    parser.add_argument(
        '--force-interactive', '-i',
        action='store_true',
        help='Force interactive mode for Vimeo credentials even when language is provided'
    )
    
    parser.add_argument(
        '--skip', '-k',
        help='Comma-separated list of steps to skip. Available steps: vimeo, folders, config, env. '
             'Example: --skip vimeo,config to skip Vimeo credential setup and config saving'
    )
    
    return parser.parse_args()

def main():
    """Main setup function"""
    args = parse_arguments()
    
    # Show current configuration if requested
    if args.show_config:
        config = load_config()
        if config:
            print("üìã Current Configuration:")
            print(f"   Language Code: {config.get('language_code', 'Not set')}")
            print(f"   Folder Location: {config.get('folder_location', 'Not set')}")
            print(f"   Project Path: {config.get('project_path', 'Not set')}")
        else:
            print("‚ùå No configuration found. Run setup without --show-config first.")
        return
    
    print("üöÄ ZUME Slide Full Builder Setup")
    print("=" * 40)
    print(f"üìç Target location: {os.path.abspath(args.folder)}")
    
    # Check if running in non-interactive mode
    non_interactive = args.language is not None and not args.force_interactive
    if non_interactive:
        print("ü§ñ Running in non-interactive mode")
    else:
        print("üë§ Running in interactive mode")
    
    try:
        # Step 1: Setup Vimeo credentials
        if non_interactive:
            print("\nüîë Skipping Vimeo credential setup in non-interactive mode")
            print("   Make sure your .env file contains: VIMEO_CLIENT_ID, VIMEO_CLIENT_SECRET, VIMEO_ACCESS_TOKEN")
            env_vars = load_env_file()
            if not all(key in env_vars for key in ['VIMEO_CLIENT_ID', 'VIMEO_CLIENT_SECRET', 'VIMEO_ACCESS_TOKEN']):
                print("‚ö†Ô∏è  Warning: Missing Vimeo credentials in .env file")
        else:
            env_vars = setup_vimeo_credentials()
            # Step 2: Save environment variables
            save_env_file(env_vars)
        
        # Step 3: Get language code
        language_code = get_language_code(args.language)
        
        # Step 4: Create folder structure
        lang_folder = create_folder_structure(language_code, args.folder)
        
        # Step 5: Save configuration
        save_config(language_code, args.folder)
        
        print("\nüéâ Setup completed successfully!")
        print(f"Mode: {'Non-interactive' if non_interactive else 'Interactive'}")
        print(f"Language: {language_code}")
        print(f"Location: {os.path.abspath(args.folder)}")
        print(f"Project Path: {os.path.abspath(lang_folder)}")
        
        if non_interactive:
            print("\n‚ö†Ô∏è  Note: Vimeo credentials were not checked in non-interactive mode")
            print("   Ensure your .env file contains all required credentials before running other scripts")
        
        print("\nNext steps:")
        print("1. Run 2-video-download.py to download videos")
        print("2. Run 3-slides-download.py to download slides")
        print("3. Run 4-rename-files.py to rename files")
        
    except KeyboardInterrupt:
        print("\n‚ùå Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
